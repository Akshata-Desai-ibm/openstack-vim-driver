tosca_definitions_version: tosca_simple_yaml_1_0

description: Basic example to deploy a single Compute instance

node_types:
  os.ext.nodes.Compute:
    description: Extension of Compute to include additional properties allowed on a Nova server
    derived_from: tosca.nodes.Compute
    properties:
      admin_pass:
        description: The administrator password for the server
        type: string
        required: false
      availability_zone: 
        description: Name of the availability zone for server placement
        type: string
        required: false
      config_drive:
        description: If True, enable config drive on the server
        type: boolean
        required: false
      diskConfig:
        description: Control how the disk is partitioned when the server is created
        type: string
        required: false
      flavor:
        description: The ID or name of the flavor to boot onto (you may instead use capability.host properties, which will find the best match based on desired CPU/Mem)
        type: string
        required: false
      flavor_update_policy:
        description: Policy on how to apply a flavor update; either by requesting a server resize or by replacing the entire server
        type: string
        required: false
      image:
        description: The ID or name of the image to boot with
        type: string
        required: false
      image_update_policy: 
        description: Policy on how to apply an image-id update; either by requesting a server rebuild or by replacing the entire server
        type: string
        required: false
      key_name:
        description: Name of keypair to inject into the server
        type: string
        required: false
      metadata:
        description: Arbitrary key/value metadata to store for this server. Both keys and values must be 255 characters or less. Non-string values will be serialized to JSON (and the serialized string must be 255 characters or less)
        type: map
        required: false
      name: 
        description: Server name
        type: string
        required: false
      reservation_id:
        description: A UUID for the set of servers being requested
        type: string
        required: false
      scheduler_hints: 
        description: Arbitrary key-value pairs specified by the client to help boot a server
        type: map
        required: false
      security_groups:
        description: List of security group names or IDs. Cannot be used if neutron ports are associated with this server; assign security groups to the ports instead
        type: list
        required: false
      software_config_transport: 
        description: >
          How the server should receive the metadata required for software configuration. 
          POLL_SERVER_CFN will allow calls to the cfn API action DescribeStackResource authenticated with the provided keypair. POLL_SERVER_HEAT will allow calls to the Heat API resource-show using the provided keystone credentials. 
          POLL_TEMP_URL will create and populate a Swift TempURL with metadata for polling. 
          ZAQAR_MESSAGE will create a dedicated zaqar queue and post the metadata for polling
        type: string
        required: false
      user_data: 
        description: User data script to be executed by cloud-init. Changes cause replacement of the resource by default, but can be ignored altogether by setting the `user_data_update_policy` property
        type: string
        required: false
      user_data_format: 
        description: >
          How the user_data should be formatted for the server. 
          For HEAT_CFNTOOLS, the user_data is bundled as part of the heat-cfntools cloud-init boot configuration data. 
          For RAW the user_data is passed to Nova unmodified. 
          For SOFTWARE_CONFIG user_data is bundled as part of the software config data, and metadata is derived from any associated SoftwareDeployment resources
        type: string
        required: false
      user_data_update_policy:
        description: Policy on how to apply a user_data update; either by ignoring it or by replacing the entire server
        type: string
        required: false    

topology_template:
  inputs:
    key_name:
      type: string
    image:
      type: string
    flavor: 
      type: string
    network:
      type: string

  node_templates:
    hello_world_server:
      type: os.ext.nodes.Compute
      properties:
        image: { get_input: image }
        key_name: { get_input: key_name }
        flavor: { get_input: flavor }

    # Select existing Network
    attached_network:
      type: tosca.nodes.network.Network
      properties:
        network_name: { get_input: network }

    # Add the hello_world_server to the Network
    hello_world_server_port:
      type: tosca.nodes.network.Port
      requirements:
        - binding:
            node: hello_world_server
        - link:
            node: attached_network

  outputs:
    private_ip:
      description: The private IP address of the hello_world_server
      value: { get_attribute: [hello_world_server, private_address] }
